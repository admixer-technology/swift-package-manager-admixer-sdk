#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
#ifndef ADMIXERSDK_SWIFT_H
#define ADMIXERSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AdmixerSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class AMAdView;
@class NSString;

SWIFT_PROTOCOL("_TtP10AdmixerSDK12AMAdDelegate_")
@protocol AMAdDelegate <NSObject>
@optional
- (void)adDidReceiveAd:(id _Nonnull)ad;
- (void)ad:(id _Nonnull)loadInstance didReceiveNativeAd:(id _Nonnull)responseInstance;
- (void)ad:(id _Nonnull)ad requestFailedWithError:(NSError * _Nonnull)error;
- (void)adWasClicked:(id _Nonnull)ad;
- (void)adWasClicked:(AMAdView * _Nonnull)ad withURL:(NSString * _Nonnull)urlString;
- (void)adWillClose:(id _Nonnull)ad;
- (void)adDidClose:(id _Nonnull)ad;
- (void)adWillPresent:(id _Nonnull)ad;
- (void)adDidPresent:(id _Nonnull)ad;
- (void)adWillLeaveApplication:(id _Nonnull)ad;
@end

@class AMLocation;
enum AMGender : NSInteger;
@class NSData;
@class NSDate;

SWIFT_PROTOCOL("_TtP10AdmixerSDK26AMAdProtocolFoundationCore_")
@protocol AMAdProtocolFoundationCore <NSObject>
@property (nonatomic, readonly) NSInteger memberId;
@property (nonatomic) NSInteger publisherId;
@property (nonatomic, strong) AMLocation * _Nullable location;
@property (nonatomic, copy) NSString * _Nullable age;
@property (nonatomic) enum AMGender gender;
@property (nonatomic, copy) NSString * _Nullable externalUid;
@property (nonatomic, copy) NSString * _Nullable contentId;
@property (nonatomic, copy) NSData * _Nullable ortbObject;
- (void)setLocationWithLatitude:(CGFloat)latitude longitude:(CGFloat)longitude timestamp:(NSDate * _Nullable)timestamp horizontalAccuracy:(CGFloat)horizontalAccuracy;
- (void)setLocationWithLatitude:(CGFloat)latitude longitude:(CGFloat)longitude timestamp:(NSDate * _Nullable)timestamp horizontalAccuracy:(CGFloat)horizontalAccuracy precision:(NSInteger)precision;
- (void)addCustomKeywordWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value;
- (void)removeCustomKeywordWithKey:(NSString * _Nonnull)key;
- (void)clearCustomKeywords;
@end

typedef SWIFT_ENUM(NSInteger, AMAdResponseCode, open) {
  AMAdResponseCodeAmDefaultCode = -1,
  AMAdResponseCodeAmAdResponseSuccessful = 0,
  AMAdResponseCodeAmAdResponseInvalidRequest = 1,
  AMAdResponseCodeAmAdResponseUnableToFill = 2,
  AMAdResponseCodeAmAdResponseMediatedSDKUnavailable = 3,
  AMAdResponseCodeAmAdResponseNetworkError = 4,
  AMAdResponseCodeAmAdResponseInternalError = 5,
  AMAdResponseCodeAmAdResponseBadFormat = 100,
  AMAdResponseCodeAmAdResponseBadURL = 101,
  AMAdResponseCodeAmAdResponseBadURLConnection = 102,
  AMAdResponseCodeAmAdResponseNonViewResponse = 103,
};


SWIFT_CLASS("_TtC10AdmixerSDK16AMAdResponseInfo")
@interface AMAdResponseInfo : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, AMAdType, open) {
  AMAdTypeUnknown = 0,
  AMAdTypeBanner = 1,
  AMAdTypeVideo = 2,
  AMAdTypeNative = 3,
};

enum AMClickThroughAction : NSInteger;
@class NSCoder;

SWIFT_CLASS("_TtC10AdmixerSDK8AMAdView")
@interface AMAdView : UIView
@property (nonatomic) NSInteger memberId;
@property (nonatomic) NSInteger publisherId;
@property (nonatomic, strong) AMLocation * _Nullable location;
@property (nonatomic, copy) NSString * _Nullable age;
@property (nonatomic) enum AMGender gender;
@property (nonatomic, copy) NSString * _Nullable externalUid;
@property (nonatomic, copy) NSString * _Nullable contentId;
@property (nonatomic, copy) NSData * _Nullable ortbObject;
@property (nonatomic, copy) NSString * _Nullable placementId;
@property (nonatomic) enum AMClickThroughAction clickThroughAction;
@property (nonatomic, copy) NSString * _Nullable creativeId;
@property (nonatomic) BOOL shouldServePublicServiceAnnouncements;
@property (nonatomic, weak) id <AMAdDelegate> _Nullable delegate;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
- (void)loadAd;
@end


@interface AMAdView (SWIFT_EXTENSION(AdmixerSDK))
- (void)setLocationWithLatitude:(CGFloat)latitude longitude:(CGFloat)longitude timestamp:(NSDate * _Nullable)timestamp horizontalAccuracy:(CGFloat)horizontalAccuracy;
- (void)setLocationWithLatitude:(CGFloat)latitude longitude:(CGFloat)longitude timestamp:(NSDate * _Nullable)timestamp horizontalAccuracy:(CGFloat)horizontalAccuracy precision:(NSInteger)precision;
- (void)addCustomKeywordWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value;
- (void)removeCustomKeywordWithKey:(NSString * _Nonnull)key;
- (void)clearCustomKeywords;
@end



@class NSValue;

SWIFT_CLASS("_TtC10AdmixerSDK14AMBannerAdView")
@interface AMBannerAdView : AMAdView
@property (nonatomic) CGSize adSize;
@property (nonatomic, copy) NSArray<NSValue *> * _Nonnull adSizes;
@property (nonatomic) NSTimeInterval autoRefreshInterval;
@property (nonatomic) CGSize loadedAdSize;
@property (nonatomic) BOOL shouldResizeAdToFitContainer;
- (void)awakeFromNib;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame placementId:(NSString * _Nonnull)placementId;
- (nonnull instancetype)initWithFrame:(CGRect)frame placementId:(NSString * _Nonnull)placementId adSize:(CGSize)size;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)loadAd;
- (void)layoutSubviews;
- (void)didMoveToWindow;
- (void)didMoveToSuperview;
@end



SWIFT_PROTOCOL("_TtP10AdmixerSDK22AMBannerAdViewDelegate_")
@protocol AMBannerAdViewDelegate <AMAdDelegate>
@end


SWIFT_CLASS("_TtC10AdmixerSDK15AMBaseUrlConfig")
@interface AMBaseUrlConfig : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, AMClickThroughAction, open) {
  AMClickThroughActionReturnURL = 0,
  AMClickThroughActionOpenDeviceBrowser = 1,
  AMClickThroughActionOpenSDKBrowser = 2,
};

@protocol AMCustomAdapterDelegate;

SWIFT_PROTOCOL("_TtP10AdmixerSDK15AMCustomAdapter_")
@protocol AMCustomAdapter <NSObject>
@property (nonatomic, strong) id <AMCustomAdapterDelegate> _Nullable delegate;
- (nonnull instancetype)init;
@end

@class UIViewController;
@class AMTargetingParameters;
@protocol AMCustomAdapterBannerDelegate;

SWIFT_PROTOCOL("_TtP10AdmixerSDK21AMCustomAdapterBanner_")
@protocol AMCustomAdapterBanner <AMCustomAdapter>
- (void)requestAdWith:(CGSize)size rootViewController:(UIViewController * _Nullable)rootViewController serverParameter:(NSString * _Nullable)parameterString adUnitId:(NSString * _Nullable)idString targetingParameters:(AMTargetingParameters * _Nullable)targetingParameters;
@property (nonatomic, strong) id <AMCustomAdapterBannerDelegate> _Nullable bannerDelegate;
@end


SWIFT_PROTOCOL("_TtP10AdmixerSDK23AMCustomAdapterDelegate_")
@protocol AMCustomAdapterDelegate <NSObject>
- (void)didFailToLoadAd:(enum AMAdResponseCode)errorCode;
- (void)adWasClicked;
- (void)willPresentAd;
- (void)didPresentAd;
- (void)willCloseAd;
- (void)didCloseAd;
- (void)willLeaveApplication;
@end


SWIFT_PROTOCOL("_TtP10AdmixerSDK29AMCustomAdapterBannerDelegate_")
@protocol AMCustomAdapterBannerDelegate <AMCustomAdapterDelegate>
- (void)didLoadBannerAd:(UIView * _Nullable)view;
@end


@protocol AMCustomAdapterInterstitialDelegate;

SWIFT_PROTOCOL("_TtP10AdmixerSDK27AMCustomAdapterInterstitial_")
@protocol AMCustomAdapterInterstitial <AMCustomAdapter>
- (void)requestAdWithParameter:(NSString * _Nullable)parameterString adUnitId:(NSString * _Nullable)idString targetingParameters:(AMTargetingParameters * _Nullable)targetingParameters;
- (void)presentFrom:(UIViewController * _Nullable)viewController;
- (BOOL)isReady SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) id <AMCustomAdapterInterstitialDelegate> _Nullable interstitialDelegate;
@end


SWIFT_PROTOCOL("_TtP10AdmixerSDK35AMCustomAdapterInterstitialDelegate_")
@protocol AMCustomAdapterInterstitialDelegate <AMCustomAdapterDelegate>
- (void)didLoadInterstitialAd:(id <AMCustomAdapterInterstitial> _Nullable)adapter;
- (void)failedToDisplayAd;
@end

typedef SWIFT_ENUM(NSInteger, AMGender, open) {
  AMGenderUnknown = 0,
  AMGenderMale = 1,
  AMGenderFemale = 2,
};


SWIFT_CLASS("_TtC10AdmixerSDK17AMInstreamVideoAd")
@interface AMInstreamVideoAd : AMAdView
@property (nonatomic) CGRect frame;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// Set the user’s current location.  This allows ad buyers to do location targeting, which can increase spend.
- (void)setLocationWithLatitude:(CGFloat)latitude longitude:(CGFloat)longitude timestamp:(NSDate * _Nullable)timestamp horizontalAccuracy:(CGFloat)horizontalAccuracy;
/// Set the user’s current location rounded to the number of decimal places specified in “precision”.
/// Valid values are between 0 and 6 inclusive. If the precision is -1, no rounding will occur.
- (void)setLocationWithLatitude:(CGFloat)latitude longitude:(CGFloat)longitude timestamp:(NSDate * _Nullable)timestamp horizontalAccuracy:(CGFloat)horizontalAccuracy precision:(NSInteger)precision;
@end


SWIFT_PROTOCOL("_TtP10AdmixerSDK29AMInstreamVideoAdLoadDelegate_")
@protocol AMInstreamVideoAdLoadDelegate <NSObject>
- (void)adDidReceiveAd:(id _Nonnull)ad;
@optional
- (void)ad:(id _Nonnull)ad requestFailedWithError:(NSError * _Nonnull)error;
@end


SWIFT_PROTOCOL("_TtP10AdmixerSDK29AMInstreamVideoAdPlayDelegate_")
@protocol AMInstreamVideoAdPlayDelegate <NSObject>
@optional
- (void)adDidComplete:(AMAdView * _Nonnull)ad;
- (void)adCompletedFirstQuartile:(AMAdView * _Nonnull)ad;
- (void)adCompletedMidQuartile:(AMAdView * _Nonnull)ad;
- (void)adCompletedThirdQuartile:(AMAdView * _Nonnull)ad;
- (void)adMute:(AMAdView * _Nonnull)ad withStatus:(BOOL)muteStatus;
- (void)adWasClicked:(AMAdView * _Nonnull)ad;
- (void)adWasClicked:(AMAdView * _Nonnull)ad withURL:(NSString * _Nonnull)urlString;
- (void)adWillClose:(AMAdView * _Nonnull)ad;
- (void)adDidClose:(AMAdView * _Nonnull)ad;
- (void)adWillPresent:(AMAdView * _Nonnull)ad;
- (void)adDidPresent:(AMAdView * _Nonnull)ad;
- (void)adWillLeaveApplication:(AMAdView * _Nonnull)ad;
- (void)adPlayStarted:(AMAdView * _Nonnull)ad;
@end


/// This is the interface through which interstitial ads are (1)
/// fetched and then (2) shown.  These are distinct steps.  Here’s an
/// example:
/// @code
/// // Make an interstitial ad.
/// self.inter = [[AMInterstitialAd alloc] initWithPlacementId:@“1326299”];
/// // We set ourselves as the delegate so we can respond to the <code>adDidReceiveAd:' message of the // </code>AMInterstitialAdDelegate’ protocol.  (See the bottom of this file for an example.)
/// self.inter.delegate = self;
/// // When the user clicks, use the following to open the default browser on the device.
/// self.inter.clickThroughAction = AMClickThroughActionOpenDeviceBrowser;
/// // Fetch an ad in the background.  In order to show this ad,
/// // you’ll need to implement `adDidReceiveAd:’ (see below).
/// [self.inter loadAd];
/// @endcode
SWIFT_CLASS("_TtC10AdmixerSDK16AMInterstitialAd")
@interface AMInterstitialAd : AMAdView
/// Whether the interstitial ad has been fetched and is ready to
/// display.
@property (nonatomic, readonly) BOOL isReady;
@property (nonatomic) NSTimeInterval closeDelay;
/// Initialize the ad view, with required placement ID. Note that
/// you’ll need to get a placement ID from your Admixer representative
/// or your ad network.
/// \param placementId the placement ID given from AN
///
///
/// returns:
/// s void
- (nonnull instancetype)initWithPlacementId:(NSString * _Nonnull)placementId;
/// Once you’ve loaded the ad into your view with loadAd, you’ll show
/// it to the user.  For example:
/// @code
/// <ul>
///   <li>
///     (void)adDidReceiveAd:(id)ad
///     {
///     if (self.inter.isReady) {
///     [self.inter displayAdFromViewController:self];
///     }
///     }
///     @endcode
///     Technically, you don’t need to implement adDidReceiveAd: in order to
///     display the ad; it’s used here for convenience. Note that you should
///     check isReady first to make sure there’s an ad to show.
///   </li>
/// </ul>
- (void)displayFrom:(UIViewController * _Nonnull)controller;
@property (nonatomic) CGRect frame;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL("_TtP10AdmixerSDK24AMInterstitialAdDelegate_")
@protocol AMInterstitialAdDelegate <AMAdDelegate>
@optional
/// This method tells your ad view what to do if the ad can’t be shown.
/// A simple implementation used during development could just log,
/// like so:
/// @code
/// <ul>
///   <li>
///     (void)adFailedToDisplay:(AMInterstitialAd *)ad
///     {
///     NSLog(@“Oh no, the ad failed to display!”);
///     }
///     @endcode
///   </li>
/// </ul>
- (void)adFailedToDisplay:(AMInterstitialAd * _Nonnull)ad;
@end


SWIFT_CLASS("_TtC10AdmixerSDK10AMLocation")
@interface AMLocation : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, AMLogLevel, open) {
  AMLogLevelAll = 0,
  AMLogLevelMark = 9,
  AMLogLevelTrace = 10,
  AMLogLevelDebug = 20,
  AMLogLevelInfo = 30,
  AMLogLevelWarn = 40,
  AMLogLevelError = 50,
  AMLogLevelOff = 60,
};

typedef SWIFT_ENUM(NSInteger, AMNativeAdAsset, open) {
  AMNativeAdAssetIMAGE_ICON = 13,
  AMNativeAdAssetIMAGE_MAIN = 14,
  AMNativeAdAssetTITLE = 15,
  AMNativeAdAssetSPONSORED = 1,
  AMNativeAdAssetDESCRIPTION = 2,
  AMNativeAdAssetRATING = 3,
  AMNativeAdAssetLIKES = 4,
  AMNativeAdAssetDOWNLOADS = 5,
  AMNativeAdAssetPRICE = 6,
  AMNativeAdAssetSALEPRICE = 7,
  AMNativeAdAssetPHONE = 8,
  AMNativeAdAssetADDRESS = 9,
  AMNativeAdAssetDESC2 = 10,
  AMNativeAdAssetDISPLAYURL = 11,
  AMNativeAdAssetCTA = 12,
};


/// Defines all the callbacks for a native view registered
/// with an AMNativeAdResponse.
SWIFT_PROTOCOL("_TtP10AdmixerSDK18AMNativeAdDelegate_")
@protocol AMNativeAdDelegate <NSObject>
@optional
/// Sent when the native view is clicked by the user.
- (void)nativeAdWasClicked:(id _Nonnull)response;
/// Sent when the native view returns the click-through URL and click-through fallback URL
/// to the user instead of opening it in a browser.
- (void)nativeAdWasClicked:(id _Nonnull)response withURL:(NSString * _Nonnull)clickURLString fallbackURL:(NSString * _Nonnull)clickFallbackURLString;
/// Sent when the native view was clicked, and the click through
/// destination is about to open in the in-app browser.
/// @note If it is preferred that the destination open in the
/// native browser instead, then set clickThroughAction to AMClickThroughActionOpenDeviceBrowser.
- (void)nativeAdWillPresent:(id _Nonnull)response;
/// Sent when the in-app browser has finished presenting and taken
/// control from your application.
- (void)nativeAdDidPresent:(id _Nonnull)response;
/// Sent when the in-app browser will close and before
/// control has been returned to your application.
- (void)nativeAdWillClose:(id _Nonnull)response;
/// Sent when the in-app browser has closed and control
/// has been returned to your application.
- (void)nativeAdDidClose:(id _Nonnull)response;
/// Sent when the ad is about to leave the app.
/// This will happen in a number of cases, including when
/// clickThroughAction is set to AMClickThroughActionOpenDeviceBrowser.
- (void)nativeAdWillLeaveApplication:(id _Nonnull)response;
@end


SWIFT_CLASS("_TtC10AdmixerSDK20AMNativeAdImageCache")
@interface AMNativeAdImageCache : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol AMNativeAdRequestDelegate;

SWIFT_CLASS("_TtC10AdmixerSDK17AMNativeAdRequest")
@interface AMNativeAdRequest : NSObject
@property (nonatomic, copy) NSString * _Nullable placementId;
@property (nonatomic) enum AMAdType adType;
@property (nonatomic) NSInteger memberId;
@property (nonatomic) NSInteger publisherId;
@property (nonatomic, copy) NSString * _Nullable contentId;
@property (nonatomic, strong) AMLocation * _Nullable location;
@property (nonatomic, copy) NSString * _Nullable age;
@property (nonatomic) enum AMGender gender;
@property (nonatomic, copy) NSString * _Nullable externalUid;
@property (nonatomic, copy) NSData * _Nullable ortbObject;
@property (nonatomic, weak) id <AMNativeAdRequestDelegate> _Nullable delegate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)loadAd;
- (void)setRequiredAssets:(NSArray<NSNumber *> * _Nonnull)requiredAssets;
- (void)setOptionalAssets:(NSArray<NSNumber *> * _Nonnull)optionalAssets;
- (void)setLocationWithLatitude:(CGFloat)latitude longitude:(CGFloat)longitude timestamp:(NSDate * _Nullable)timestamp horizontalAccuracy:(CGFloat)horizontalAccuracy;
- (void)setLocationWithLatitude:(CGFloat)latitude longitude:(CGFloat)longitude timestamp:(NSDate * _Nullable)timestamp horizontalAccuracy:(CGFloat)horizontalAccuracy precision:(NSInteger)precision;
- (void)addCustomKeywordWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value;
- (void)removeCustomKeywordWithKey:(NSString * _Nonnull)key;
- (void)clearCustomKeywords;
@end

@class AMNativeAdResponse;

SWIFT_PROTOCOL("_TtP10AdmixerSDK25AMNativeAdRequestDelegate_")
@protocol AMNativeAdRequestDelegate <NSObject>
- (void)adRequest:(AMNativeAdRequest * _Nonnull)request didReceive:(AMNativeAdResponse * _Nonnull)response;
- (void)adRequest:(AMNativeAdRequest * _Nonnull)request didFailToLoadWithError:(NSError * _Nonnull)error with:(AMAdResponseInfo * _Nullable)adResponseInfo;
@end

@class UIImage;
@class NSURL;
@class AMNativeAdView;

SWIFT_CLASS("_TtC10AdmixerSDK18AMNativeAdResponse")
@interface AMNativeAdResponse : NSObject
/// The ad title.
@property (nonatomic, copy) NSString * _Nullable title;
/// The ad body, also known as the ad text or description.
@property (nonatomic, copy) NSString * _Nullable body;
/// The call to action text, for example, “Install Now!”
@property (nonatomic, copy) NSString * _Nullable callToAction;
/// The ad icon image.
@property (nonatomic, strong) UIImage * _Nullable iconImage;
/// The icon image size
@property (nonatomic) CGSize iconImageSize;
/// The ad main image, also known as a cover image.
@property (nonatomic, strong) UIImage * _Nullable mainImage;
/// A URL which loads the ad main image.
@property (nonatomic, copy) NSURL * _Nullable mainImageURL;
/// The main image size
@property (nonatomic) CGSize mainImageSize;
/// A URL which loads the ad icon image.
@property (nonatomic, copy) NSURL * _Nullable iconImageURL;
/// The sponspored By text
@property (nonatomic, copy) NSString * _Nullable sponsoredBy;
/// An Admixer creativeID for the current creative that is displayed
@property (nonatomic, copy) NSString * _Nullable creativeId;
/// An Admixer Single Unified object that will contain all the common fields of all the ads types
@property (nonatomic, strong) AMAdResponseInfo * _Nullable adResponseInfo;
/// Additional description of the ad
@property (nonatomic, copy) NSString * _Nullable additionalDescription;
/// privacy Link of the ad
@property (nonatomic, copy) NSString * _Nullable privacyLink;
@property (nonatomic, weak) id <AMNativeAdDelegate> _Nullable delegate;
@property (nonatomic) enum AMClickThroughAction clickThroughAction;
- (void)registerViewForTracking:(AMNativeAdView * _Nonnull)view withRootViewController:(UIViewController * _Nonnull)controller;
- (void)adWasClicked;
- (void)willPresentAd;
- (void)didPresentAd;
- (void)willCloseAd;
- (void)didCloseAd;
- (void)willLeaveApplication;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10AdmixerSDK20AMNativeAdStarRating")
@interface AMNativeAdStarRating : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10AdmixerSDK14AMNativeAdView")
@interface AMNativeAdView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@protocol AMNativeCustomAdapterRequestDelegate;
@protocol AMNativeCustomAdapterAdDelegate;

/// Defines a protocol by which an external native ad SDK can be mediated by Admixer.
SWIFT_PROTOCOL("_TtP10AdmixerSDK21AMNativeCustomAdapter_")
@protocol AMNativeCustomAdapter <NSObject>
- (nonnull instancetype)init;
/// Allows the Admixer SDK to be notified of a successful or failed request load.
@property (nonatomic, weak) id <AMNativeCustomAdapterRequestDelegate> _Nullable requestDelegate;
/// Allows the Admixer SDK to be notified of actions performed on the native view.
@property (nonatomic, weak) id <AMNativeCustomAdapterAdDelegate> _Nullable nativeAdDelegate;
///
/// returns:
/// YES if the response is no longer valid, for example, if too much time has elapsed
/// since receiving it. NO if the response is still valid.
@property (nonatomic) BOOL expired;
/// Will be called by the Admixer SDK when a mediated native ad request should be initiated.
- (void)requestNativeAdWithServerParameter:(NSString * _Nullable)parameterString adUnitId:(NSString * _Nullable)adUnitId targetingParameters:(AMTargetingParameters * _Nullable)targetingParameters;
@optional
/// Should be implemented if the mediated SDK handles both impression tracking and click tracking automatically.
- (void)registerViewForImpressionTrackingAndClickHandling:(AMNativeAdView * _Nonnull)view withRootViewController:(UIViewController * _Nonnull)rvc;
/// Should be implemented if the mediated SDK handles only impression tracking automatically, and needs to
/// be manually notified that a user click has been detected.
/// @note handleClickFromRootViewController: should be implemented as well.
- (void)registerViewForImpressionTracking:(UIView * _Nonnull)view;
/// Should notify the mediated SDK that a click was registered, and that a click-through should be
/// action should be performed.
- (void)handleClickFromRootViewController:(UIViewController * _Nonnull)rvc;
/// Should notify the mediated SDK that the native view should no longer be tracked.
- (void)unregisterViewFromTracking;
@required
- (BOOL)isViewAtLeastHalfVisible SWIFT_WARN_UNUSED_RESULT;
@end


/// Callbacks for when the native view has been registered and is being tracked.
SWIFT_PROTOCOL("_TtP10AdmixerSDK31AMNativeCustomAdapterAdDelegate_")
@protocol AMNativeCustomAdapterAdDelegate <NSObject>
@optional
- (void)didInteractWithParams;
@required
- (void)adWasClicked;
- (void)willPresentAd;
- (void)didPresentAd;
- (void)willCloseAd;
- (void)didCloseAd;
- (void)willLeaveApplication;
- (void)adDidLogImpression;
@end

@class AMNativeMediatedAdResponse;

/// Callbacks for when the native ad assets are being loaded.
SWIFT_PROTOCOL("_TtP10AdmixerSDK36AMNativeCustomAdapterRequestDelegate_")
@protocol AMNativeCustomAdapterRequestDelegate <NSObject>
- (void)didLoadNativeAd:(AMNativeMediatedAdResponse * _Nonnull)response;
- (void)didFailToLoadNativeAd:(enum AMAdResponseCode)errorCode;
@end


SWIFT_CLASS("_TtC10AdmixerSDK26AMNativeMediatedAdResponse")
@interface AMNativeMediatedAdResponse : AMNativeAdResponse <AMNativeCustomAdapterAdDelegate>
- (void)adDidLogImpression;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This is the interface through which interstitial ads are (1)
/// fetched and then (2) shown.  These are distinct steps.  Here’s an
/// example:
/// @code
/// // Make an interstitial ad.
/// self.inter = [[AMRewardedAd alloc] initWithPlacementId:@“1326299”];
/// // We set ourselves as the delegate so we can respond to the <code>adDidReceiveAd:' message of the // </code>AMRewardedAdDelegate’ protocol.  (See the bottom of this file for an example.)
/// self.inter.delegate = self;
/// // When the user clicks, use the following to open the default browser on the device.
/// self.inter.clickThroughAction = AMClickThroughActionOpenDeviceBrowser;
/// // Fetch an ad in the background.  In order to show this ad,
/// // you’ll need to implement `adDidReceiveAd:’ (see below).
/// [self.inter loadAd];
/// @endcode
SWIFT_CLASS("_TtC10AdmixerSDK12AMRewardedAd")
@interface AMRewardedAd : AMAdView
/// Whether the interstitial ad has been fetched and is ready to
/// display.
@property (nonatomic, readonly) BOOL isReady;
@property (nonatomic) NSTimeInterval closeDelay;
/// Initialize the ad view, with required placement ID. Note that
/// you’ll need to get a placement ID from your Admixer representative
/// or your ad network.
/// \param placementId the placement ID given from AN
///
///
/// returns:
/// s void
- (nonnull instancetype)initWithPlacementId:(NSString * _Nonnull)placementId;
/// Once you’ve loaded the ad into your view with loadAd, you’ll show
/// it to the user.  For example:
/// @code
/// <ul>
///   <li>
///     (void)adDidReceiveAd:(id)ad
///     {
///     if (self.inter.isReady) {
///     [self.inter displayAdFromViewController:self];
///     }
///     }
///     @endcode
///     Technically, you don’t need to implement adDidReceiveAd: in order to
///     display the ad; it’s used here for convenience. Note that you should
///     check isReady first to make sure there’s an ad to show.
///   </li>
/// </ul>
- (void)displayFrom:(UIViewController * _Nonnull)controller;
@property (nonatomic) CGRect frame;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end

@class AMRewardedItem;

SWIFT_PROTOCOL("_TtP10AdmixerSDK20AMRewardedAdDelegate_")
@protocol AMRewardedAdDelegate <AMAdDelegate>
@optional
/// This method tells your ad view what to do if the ad can’t be shown.
/// A simple implementation used during development could just log,
/// like so:
/// @code
/// <ul>
///   <li>
///     (void)adFailedToDisplay:(AMRewardedAd *)ad
///     {
///     NSLog(@“Oh no, the ad failed to display!”);
///     }
///     @endcode
///   </li>
/// </ul>
- (void)adFailedToDisplay:(AMRewardedAd * _Nonnull)ad;
- (void)adRewarded:(AMRewardedAd * _Nonnull)ad userDidEarn:(AMRewardedItem * _Nonnull)reward;
@end

@class NSDecimalNumber;

SWIFT_CLASS("_TtC10AdmixerSDK14AMRewardedItem")
@interface AMRewardedItem : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
@property (nonatomic, readonly, strong) NSDecimalNumber * _Null_unspecified amount;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10AdmixerSDK21AMTargetingParameters")
@interface AMTargetingParameters : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10AdmixerSDK21AMVideoPlayerSettings")
@interface AMVideoPlayerSettings : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
#ifndef ADMIXERSDK_SWIFT_H
#define ADMIXERSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AdmixerSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class AMAdView;
@class NSString;

SWIFT_PROTOCOL("_TtP10AdmixerSDK12AMAdDelegate_")
@protocol AMAdDelegate <NSObject>
@optional
- (void)adDidReceiveAd:(id _Nonnull)ad;
- (void)ad:(id _Nonnull)loadInstance didReceiveNativeAd:(id _Nonnull)responseInstance;
- (void)ad:(id _Nonnull)ad requestFailedWithError:(NSError * _Nonnull)error;
- (void)adWasClicked:(id _Nonnull)ad;
- (void)adWasClicked:(AMAdView * _Nonnull)ad withURL:(NSString * _Nonnull)urlString;
- (void)adWillClose:(id _Nonnull)ad;
- (void)adDidClose:(id _Nonnull)ad;
- (void)adWillPresent:(id _Nonnull)ad;
- (void)adDidPresent:(id _Nonnull)ad;
- (void)adWillLeaveApplication:(id _Nonnull)ad;
@end

@class AMLocation;
enum AMGender : NSInteger;
@class NSData;
@class NSDate;

SWIFT_PROTOCOL("_TtP10AdmixerSDK26AMAdProtocolFoundationCore_")
@protocol AMAdProtocolFoundationCore <NSObject>
@property (nonatomic, readonly) NSInteger memberId;
@property (nonatomic) NSInteger publisherId;
@property (nonatomic, strong) AMLocation * _Nullable location;
@property (nonatomic, copy) NSString * _Nullable age;
@property (nonatomic) enum AMGender gender;
@property (nonatomic, copy) NSString * _Nullable externalUid;
@property (nonatomic, copy) NSString * _Nullable contentId;
@property (nonatomic, copy) NSData * _Nullable ortbObject;
- (void)setLocationWithLatitude:(CGFloat)latitude longitude:(CGFloat)longitude timestamp:(NSDate * _Nullable)timestamp horizontalAccuracy:(CGFloat)horizontalAccuracy;
- (void)setLocationWithLatitude:(CGFloat)latitude longitude:(CGFloat)longitude timestamp:(NSDate * _Nullable)timestamp horizontalAccuracy:(CGFloat)horizontalAccuracy precision:(NSInteger)precision;
- (void)addCustomKeywordWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value;
- (void)removeCustomKeywordWithKey:(NSString * _Nonnull)key;
- (void)clearCustomKeywords;
@end

typedef SWIFT_ENUM(NSInteger, AMAdResponseCode, open) {
  AMAdResponseCodeAmDefaultCode = -1,
  AMAdResponseCodeAmAdResponseSuccessful = 0,
  AMAdResponseCodeAmAdResponseInvalidRequest = 1,
  AMAdResponseCodeAmAdResponseUnableToFill = 2,
  AMAdResponseCodeAmAdResponseMediatedSDKUnavailable = 3,
  AMAdResponseCodeAmAdResponseNetworkError = 4,
  AMAdResponseCodeAmAdResponseInternalError = 5,
  AMAdResponseCodeAmAdResponseBadFormat = 100,
  AMAdResponseCodeAmAdResponseBadURL = 101,
  AMAdResponseCodeAmAdResponseBadURLConnection = 102,
  AMAdResponseCodeAmAdResponseNonViewResponse = 103,
};


SWIFT_CLASS("_TtC10AdmixerSDK16AMAdResponseInfo")
@interface AMAdResponseInfo : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, AMAdType, open) {
  AMAdTypeUnknown = 0,
  AMAdTypeBanner = 1,
  AMAdTypeVideo = 2,
  AMAdTypeNative = 3,
};

enum AMClickThroughAction : NSInteger;
@class NSCoder;

SWIFT_CLASS("_TtC10AdmixerSDK8AMAdView")
@interface AMAdView : UIView
@property (nonatomic) NSInteger memberId;
@property (nonatomic) NSInteger publisherId;
@property (nonatomic, strong) AMLocation * _Nullable location;
@property (nonatomic, copy) NSString * _Nullable age;
@property (nonatomic) enum AMGender gender;
@property (nonatomic, copy) NSString * _Nullable externalUid;
@property (nonatomic, copy) NSString * _Nullable contentId;
@property (nonatomic, copy) NSData * _Nullable ortbObject;
@property (nonatomic, copy) NSString * _Nullable placementId;
@property (nonatomic) enum AMClickThroughAction clickThroughAction;
@property (nonatomic, copy) NSString * _Nullable creativeId;
@property (nonatomic) BOOL shouldServePublicServiceAnnouncements;
@property (nonatomic, weak) id <AMAdDelegate> _Nullable delegate;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
- (void)loadAd;
@end


@interface AMAdView (SWIFT_EXTENSION(AdmixerSDK))
- (void)setLocationWithLatitude:(CGFloat)latitude longitude:(CGFloat)longitude timestamp:(NSDate * _Nullable)timestamp horizontalAccuracy:(CGFloat)horizontalAccuracy;
- (void)setLocationWithLatitude:(CGFloat)latitude longitude:(CGFloat)longitude timestamp:(NSDate * _Nullable)timestamp horizontalAccuracy:(CGFloat)horizontalAccuracy precision:(NSInteger)precision;
- (void)addCustomKeywordWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value;
- (void)removeCustomKeywordWithKey:(NSString * _Nonnull)key;
- (void)clearCustomKeywords;
@end



@class NSValue;

SWIFT_CLASS("_TtC10AdmixerSDK14AMBannerAdView")
@interface AMBannerAdView : AMAdView
@property (nonatomic) CGSize adSize;
@property (nonatomic, copy) NSArray<NSValue *> * _Nonnull adSizes;
@property (nonatomic) NSTimeInterval autoRefreshInterval;
@property (nonatomic) CGSize loadedAdSize;
@property (nonatomic) BOOL shouldResizeAdToFitContainer;
- (void)awakeFromNib;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame placementId:(NSString * _Nonnull)placementId;
- (nonnull instancetype)initWithFrame:(CGRect)frame placementId:(NSString * _Nonnull)placementId adSize:(CGSize)size;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)loadAd;
- (void)layoutSubviews;
- (void)didMoveToWindow;
- (void)didMoveToSuperview;
@end



SWIFT_PROTOCOL("_TtP10AdmixerSDK22AMBannerAdViewDelegate_")
@protocol AMBannerAdViewDelegate <AMAdDelegate>
@end


SWIFT_CLASS("_TtC10AdmixerSDK15AMBaseUrlConfig")
@interface AMBaseUrlConfig : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, AMClickThroughAction, open) {
  AMClickThroughActionReturnURL = 0,
  AMClickThroughActionOpenDeviceBrowser = 1,
  AMClickThroughActionOpenSDKBrowser = 2,
};

@protocol AMCustomAdapterDelegate;

SWIFT_PROTOCOL("_TtP10AdmixerSDK15AMCustomAdapter_")
@protocol AMCustomAdapter <NSObject>
@property (nonatomic, strong) id <AMCustomAdapterDelegate> _Nullable delegate;
- (nonnull instancetype)init;
@end

@class UIViewController;
@class AMTargetingParameters;
@protocol AMCustomAdapterBannerDelegate;

SWIFT_PROTOCOL("_TtP10AdmixerSDK21AMCustomAdapterBanner_")
@protocol AMCustomAdapterBanner <AMCustomAdapter>
- (void)requestAdWith:(CGSize)size rootViewController:(UIViewController * _Nullable)rootViewController serverParameter:(NSString * _Nullable)parameterString adUnitId:(NSString * _Nullable)idString targetingParameters:(AMTargetingParameters * _Nullable)targetingParameters;
@property (nonatomic, strong) id <AMCustomAdapterBannerDelegate> _Nullable bannerDelegate;
@end


SWIFT_PROTOCOL("_TtP10AdmixerSDK23AMCustomAdapterDelegate_")
@protocol AMCustomAdapterDelegate <NSObject>
- (void)didFailToLoadAd:(enum AMAdResponseCode)errorCode;
- (void)adWasClicked;
- (void)willPresentAd;
- (void)didPresentAd;
- (void)willCloseAd;
- (void)didCloseAd;
- (void)willLeaveApplication;
@end


SWIFT_PROTOCOL("_TtP10AdmixerSDK29AMCustomAdapterBannerDelegate_")
@protocol AMCustomAdapterBannerDelegate <AMCustomAdapterDelegate>
- (void)didLoadBannerAd:(UIView * _Nullable)view;
@end


@protocol AMCustomAdapterInterstitialDelegate;

SWIFT_PROTOCOL("_TtP10AdmixerSDK27AMCustomAdapterInterstitial_")
@protocol AMCustomAdapterInterstitial <AMCustomAdapter>
- (void)requestAdWithParameter:(NSString * _Nullable)parameterString adUnitId:(NSString * _Nullable)idString targetingParameters:(AMTargetingParameters * _Nullable)targetingParameters;
- (void)presentFrom:(UIViewController * _Nullable)viewController;
- (BOOL)isReady SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) id <AMCustomAdapterInterstitialDelegate> _Nullable interstitialDelegate;
@end


SWIFT_PROTOCOL("_TtP10AdmixerSDK35AMCustomAdapterInterstitialDelegate_")
@protocol AMCustomAdapterInterstitialDelegate <AMCustomAdapterDelegate>
- (void)didLoadInterstitialAd:(id <AMCustomAdapterInterstitial> _Nullable)adapter;
- (void)failedToDisplayAd;
@end

typedef SWIFT_ENUM(NSInteger, AMGender, open) {
  AMGenderUnknown = 0,
  AMGenderMale = 1,
  AMGenderFemale = 2,
};


SWIFT_CLASS("_TtC10AdmixerSDK17AMInstreamVideoAd")
@interface AMInstreamVideoAd : AMAdView
@property (nonatomic) CGRect frame;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// Set the user’s current location.  This allows ad buyers to do location targeting, which can increase spend.
- (void)setLocationWithLatitude:(CGFloat)latitude longitude:(CGFloat)longitude timestamp:(NSDate * _Nullable)timestamp horizontalAccuracy:(CGFloat)horizontalAccuracy;
/// Set the user’s current location rounded to the number of decimal places specified in “precision”.
/// Valid values are between 0 and 6 inclusive. If the precision is -1, no rounding will occur.
- (void)setLocationWithLatitude:(CGFloat)latitude longitude:(CGFloat)longitude timestamp:(NSDate * _Nullable)timestamp horizontalAccuracy:(CGFloat)horizontalAccuracy precision:(NSInteger)precision;
@end


SWIFT_PROTOCOL("_TtP10AdmixerSDK29AMInstreamVideoAdLoadDelegate_")
@protocol AMInstreamVideoAdLoadDelegate <NSObject>
- (void)adDidReceiveAd:(id _Nonnull)ad;
@optional
- (void)ad:(id _Nonnull)ad requestFailedWithError:(NSError * _Nonnull)error;
@end


SWIFT_PROTOCOL("_TtP10AdmixerSDK29AMInstreamVideoAdPlayDelegate_")
@protocol AMInstreamVideoAdPlayDelegate <NSObject>
@optional
- (void)adDidComplete:(AMAdView * _Nonnull)ad;
- (void)adCompletedFirstQuartile:(AMAdView * _Nonnull)ad;
- (void)adCompletedMidQuartile:(AMAdView * _Nonnull)ad;
- (void)adCompletedThirdQuartile:(AMAdView * _Nonnull)ad;
- (void)adMute:(AMAdView * _Nonnull)ad withStatus:(BOOL)muteStatus;
- (void)adWasClicked:(AMAdView * _Nonnull)ad;
- (void)adWasClicked:(AMAdView * _Nonnull)ad withURL:(NSString * _Nonnull)urlString;
- (void)adWillClose:(AMAdView * _Nonnull)ad;
- (void)adDidClose:(AMAdView * _Nonnull)ad;
- (void)adWillPresent:(AMAdView * _Nonnull)ad;
- (void)adDidPresent:(AMAdView * _Nonnull)ad;
- (void)adWillLeaveApplication:(AMAdView * _Nonnull)ad;
- (void)adPlayStarted:(AMAdView * _Nonnull)ad;
@end


/// This is the interface through which interstitial ads are (1)
/// fetched and then (2) shown.  These are distinct steps.  Here’s an
/// example:
/// @code
/// // Make an interstitial ad.
/// self.inter = [[AMInterstitialAd alloc] initWithPlacementId:@“1326299”];
/// // We set ourselves as the delegate so we can respond to the <code>adDidReceiveAd:' message of the // </code>AMInterstitialAdDelegate’ protocol.  (See the bottom of this file for an example.)
/// self.inter.delegate = self;
/// // When the user clicks, use the following to open the default browser on the device.
/// self.inter.clickThroughAction = AMClickThroughActionOpenDeviceBrowser;
/// // Fetch an ad in the background.  In order to show this ad,
/// // you’ll need to implement `adDidReceiveAd:’ (see below).
/// [self.inter loadAd];
/// @endcode
SWIFT_CLASS("_TtC10AdmixerSDK16AMInterstitialAd")
@interface AMInterstitialAd : AMAdView
/// Whether the interstitial ad has been fetched and is ready to
/// display.
@property (nonatomic, readonly) BOOL isReady;
@property (nonatomic) NSTimeInterval closeDelay;
/// Initialize the ad view, with required placement ID. Note that
/// you’ll need to get a placement ID from your Admixer representative
/// or your ad network.
/// \param placementId the placement ID given from AN
///
///
/// returns:
/// s void
- (nonnull instancetype)initWithPlacementId:(NSString * _Nonnull)placementId;
/// Once you’ve loaded the ad into your view with loadAd, you’ll show
/// it to the user.  For example:
/// @code
/// <ul>
///   <li>
///     (void)adDidReceiveAd:(id)ad
///     {
///     if (self.inter.isReady) {
///     [self.inter displayAdFromViewController:self];
///     }
///     }
///     @endcode
///     Technically, you don’t need to implement adDidReceiveAd: in order to
///     display the ad; it’s used here for convenience. Note that you should
///     check isReady first to make sure there’s an ad to show.
///   </li>
/// </ul>
- (void)displayFrom:(UIViewController * _Nonnull)controller;
@property (nonatomic) CGRect frame;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL("_TtP10AdmixerSDK24AMInterstitialAdDelegate_")
@protocol AMInterstitialAdDelegate <AMAdDelegate>
@optional
/// This method tells your ad view what to do if the ad can’t be shown.
/// A simple implementation used during development could just log,
/// like so:
/// @code
/// <ul>
///   <li>
///     (void)adFailedToDisplay:(AMInterstitialAd *)ad
///     {
///     NSLog(@“Oh no, the ad failed to display!”);
///     }
///     @endcode
///   </li>
/// </ul>
- (void)adFailedToDisplay:(AMInterstitialAd * _Nonnull)ad;
@end


SWIFT_CLASS("_TtC10AdmixerSDK10AMLocation")
@interface AMLocation : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, AMLogLevel, open) {
  AMLogLevelAll = 0,
  AMLogLevelMark = 9,
  AMLogLevelTrace = 10,
  AMLogLevelDebug = 20,
  AMLogLevelInfo = 30,
  AMLogLevelWarn = 40,
  AMLogLevelError = 50,
  AMLogLevelOff = 60,
};

typedef SWIFT_ENUM(NSInteger, AMNativeAdAsset, open) {
  AMNativeAdAssetIMAGE_ICON = 13,
  AMNativeAdAssetIMAGE_MAIN = 14,
  AMNativeAdAssetTITLE = 15,
  AMNativeAdAssetSPONSORED = 1,
  AMNativeAdAssetDESCRIPTION = 2,
  AMNativeAdAssetRATING = 3,
  AMNativeAdAssetLIKES = 4,
  AMNativeAdAssetDOWNLOADS = 5,
  AMNativeAdAssetPRICE = 6,
  AMNativeAdAssetSALEPRICE = 7,
  AMNativeAdAssetPHONE = 8,
  AMNativeAdAssetADDRESS = 9,
  AMNativeAdAssetDESC2 = 10,
  AMNativeAdAssetDISPLAYURL = 11,
  AMNativeAdAssetCTA = 12,
};


/// Defines all the callbacks for a native view registered
/// with an AMNativeAdResponse.
SWIFT_PROTOCOL("_TtP10AdmixerSDK18AMNativeAdDelegate_")
@protocol AMNativeAdDelegate <NSObject>
@optional
/// Sent when the native view is clicked by the user.
- (void)nativeAdWasClicked:(id _Nonnull)response;
/// Sent when the native view returns the click-through URL and click-through fallback URL
/// to the user instead of opening it in a browser.
- (void)nativeAdWasClicked:(id _Nonnull)response withURL:(NSString * _Nonnull)clickURLString fallbackURL:(NSString * _Nonnull)clickFallbackURLString;
/// Sent when the native view was clicked, and the click through
/// destination is about to open in the in-app browser.
/// @note If it is preferred that the destination open in the
/// native browser instead, then set clickThroughAction to AMClickThroughActionOpenDeviceBrowser.
- (void)nativeAdWillPresent:(id _Nonnull)response;
/// Sent when the in-app browser has finished presenting and taken
/// control from your application.
- (void)nativeAdDidPresent:(id _Nonnull)response;
/// Sent when the in-app browser will close and before
/// control has been returned to your application.
- (void)nativeAdWillClose:(id _Nonnull)response;
/// Sent when the in-app browser has closed and control
/// has been returned to your application.
- (void)nativeAdDidClose:(id _Nonnull)response;
/// Sent when the ad is about to leave the app.
/// This will happen in a number of cases, including when
/// clickThroughAction is set to AMClickThroughActionOpenDeviceBrowser.
- (void)nativeAdWillLeaveApplication:(id _Nonnull)response;
@end


SWIFT_CLASS("_TtC10AdmixerSDK20AMNativeAdImageCache")
@interface AMNativeAdImageCache : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol AMNativeAdRequestDelegate;

SWIFT_CLASS("_TtC10AdmixerSDK17AMNativeAdRequest")
@interface AMNativeAdRequest : NSObject
@property (nonatomic, copy) NSString * _Nullable placementId;
@property (nonatomic) enum AMAdType adType;
@property (nonatomic) NSInteger memberId;
@property (nonatomic) NSInteger publisherId;
@property (nonatomic, copy) NSString * _Nullable contentId;
@property (nonatomic, strong) AMLocation * _Nullable location;
@property (nonatomic, copy) NSString * _Nullable age;
@property (nonatomic) enum AMGender gender;
@property (nonatomic, copy) NSString * _Nullable externalUid;
@property (nonatomic, copy) NSData * _Nullable ortbObject;
@property (nonatomic, weak) id <AMNativeAdRequestDelegate> _Nullable delegate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)loadAd;
- (void)setRequiredAssets:(NSArray<NSNumber *> * _Nonnull)requiredAssets;
- (void)setOptionalAssets:(NSArray<NSNumber *> * _Nonnull)optionalAssets;
- (void)setLocationWithLatitude:(CGFloat)latitude longitude:(CGFloat)longitude timestamp:(NSDate * _Nullable)timestamp horizontalAccuracy:(CGFloat)horizontalAccuracy;
- (void)setLocationWithLatitude:(CGFloat)latitude longitude:(CGFloat)longitude timestamp:(NSDate * _Nullable)timestamp horizontalAccuracy:(CGFloat)horizontalAccuracy precision:(NSInteger)precision;
- (void)addCustomKeywordWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value;
- (void)removeCustomKeywordWithKey:(NSString * _Nonnull)key;
- (void)clearCustomKeywords;
@end

@class AMNativeAdResponse;

SWIFT_PROTOCOL("_TtP10AdmixerSDK25AMNativeAdRequestDelegate_")
@protocol AMNativeAdRequestDelegate <NSObject>
- (void)adRequest:(AMNativeAdRequest * _Nonnull)request didReceive:(AMNativeAdResponse * _Nonnull)response;
- (void)adRequest:(AMNativeAdRequest * _Nonnull)request didFailToLoadWithError:(NSError * _Nonnull)error with:(AMAdResponseInfo * _Nullable)adResponseInfo;
@end

@class UIImage;
@class NSURL;
@class AMNativeAdView;

SWIFT_CLASS("_TtC10AdmixerSDK18AMNativeAdResponse")
@interface AMNativeAdResponse : NSObject
/// The ad title.
@property (nonatomic, copy) NSString * _Nullable title;
/// The ad body, also known as the ad text or description.
@property (nonatomic, copy) NSString * _Nullable body;
/// The call to action text, for example, “Install Now!”
@property (nonatomic, copy) NSString * _Nullable callToAction;
/// The ad icon image.
@property (nonatomic, strong) UIImage * _Nullable iconImage;
/// The icon image size
@property (nonatomic) CGSize iconImageSize;
/// The ad main image, also known as a cover image.
@property (nonatomic, strong) UIImage * _Nullable mainImage;
/// A URL which loads the ad main image.
@property (nonatomic, copy) NSURL * _Nullable mainImageURL;
/// The main image size
@property (nonatomic) CGSize mainImageSize;
/// A URL which loads the ad icon image.
@property (nonatomic, copy) NSURL * _Nullable iconImageURL;
/// The sponspored By text
@property (nonatomic, copy) NSString * _Nullable sponsoredBy;
/// An Admixer creativeID for the current creative that is displayed
@property (nonatomic, copy) NSString * _Nullable creativeId;
/// An Admixer Single Unified object that will contain all the common fields of all the ads types
@property (nonatomic, strong) AMAdResponseInfo * _Nullable adResponseInfo;
/// Additional description of the ad
@property (nonatomic, copy) NSString * _Nullable additionalDescription;
/// privacy Link of the ad
@property (nonatomic, copy) NSString * _Nullable privacyLink;
@property (nonatomic, weak) id <AMNativeAdDelegate> _Nullable delegate;
@property (nonatomic) enum AMClickThroughAction clickThroughAction;
- (void)registerViewForTracking:(AMNativeAdView * _Nonnull)view withRootViewController:(UIViewController * _Nonnull)controller;
- (void)adWasClicked;
- (void)willPresentAd;
- (void)didPresentAd;
- (void)willCloseAd;
- (void)didCloseAd;
- (void)willLeaveApplication;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10AdmixerSDK20AMNativeAdStarRating")
@interface AMNativeAdStarRating : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10AdmixerSDK14AMNativeAdView")
@interface AMNativeAdView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@protocol AMNativeCustomAdapterRequestDelegate;
@protocol AMNativeCustomAdapterAdDelegate;

/// Defines a protocol by which an external native ad SDK can be mediated by Admixer.
SWIFT_PROTOCOL("_TtP10AdmixerSDK21AMNativeCustomAdapter_")
@protocol AMNativeCustomAdapter <NSObject>
- (nonnull instancetype)init;
/// Allows the Admixer SDK to be notified of a successful or failed request load.
@property (nonatomic, weak) id <AMNativeCustomAdapterRequestDelegate> _Nullable requestDelegate;
/// Allows the Admixer SDK to be notified of actions performed on the native view.
@property (nonatomic, weak) id <AMNativeCustomAdapterAdDelegate> _Nullable nativeAdDelegate;
///
/// returns:
/// YES if the response is no longer valid, for example, if too much time has elapsed
/// since receiving it. NO if the response is still valid.
@property (nonatomic) BOOL expired;
/// Will be called by the Admixer SDK when a mediated native ad request should be initiated.
- (void)requestNativeAdWithServerParameter:(NSString * _Nullable)parameterString adUnitId:(NSString * _Nullable)adUnitId targetingParameters:(AMTargetingParameters * _Nullable)targetingParameters;
@optional
/// Should be implemented if the mediated SDK handles both impression tracking and click tracking automatically.
- (void)registerViewForImpressionTrackingAndClickHandling:(AMNativeAdView * _Nonnull)view withRootViewController:(UIViewController * _Nonnull)rvc;
/// Should be implemented if the mediated SDK handles only impression tracking automatically, and needs to
/// be manually notified that a user click has been detected.
/// @note handleClickFromRootViewController: should be implemented as well.
- (void)registerViewForImpressionTracking:(UIView * _Nonnull)view;
/// Should notify the mediated SDK that a click was registered, and that a click-through should be
/// action should be performed.
- (void)handleClickFromRootViewController:(UIViewController * _Nonnull)rvc;
/// Should notify the mediated SDK that the native view should no longer be tracked.
- (void)unregisterViewFromTracking;
@required
- (BOOL)isViewAtLeastHalfVisible SWIFT_WARN_UNUSED_RESULT;
@end


/// Callbacks for when the native view has been registered and is being tracked.
SWIFT_PROTOCOL("_TtP10AdmixerSDK31AMNativeCustomAdapterAdDelegate_")
@protocol AMNativeCustomAdapterAdDelegate <NSObject>
@optional
- (void)didInteractWithParams;
@required
- (void)adWasClicked;
- (void)willPresentAd;
- (void)didPresentAd;
- (void)willCloseAd;
- (void)didCloseAd;
- (void)willLeaveApplication;
- (void)adDidLogImpression;
@end

@class AMNativeMediatedAdResponse;

/// Callbacks for when the native ad assets are being loaded.
SWIFT_PROTOCOL("_TtP10AdmixerSDK36AMNativeCustomAdapterRequestDelegate_")
@protocol AMNativeCustomAdapterRequestDelegate <NSObject>
- (void)didLoadNativeAd:(AMNativeMediatedAdResponse * _Nonnull)response;
- (void)didFailToLoadNativeAd:(enum AMAdResponseCode)errorCode;
@end


SWIFT_CLASS("_TtC10AdmixerSDK26AMNativeMediatedAdResponse")
@interface AMNativeMediatedAdResponse : AMNativeAdResponse <AMNativeCustomAdapterAdDelegate>
- (void)adDidLogImpression;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This is the interface through which interstitial ads are (1)
/// fetched and then (2) shown.  These are distinct steps.  Here’s an
/// example:
/// @code
/// // Make an interstitial ad.
/// self.inter = [[AMRewardedAd alloc] initWithPlacementId:@“1326299”];
/// // We set ourselves as the delegate so we can respond to the <code>adDidReceiveAd:' message of the // </code>AMRewardedAdDelegate’ protocol.  (See the bottom of this file for an example.)
/// self.inter.delegate = self;
/// // When the user clicks, use the following to open the default browser on the device.
/// self.inter.clickThroughAction = AMClickThroughActionOpenDeviceBrowser;
/// // Fetch an ad in the background.  In order to show this ad,
/// // you’ll need to implement `adDidReceiveAd:’ (see below).
/// [self.inter loadAd];
/// @endcode
SWIFT_CLASS("_TtC10AdmixerSDK12AMRewardedAd")
@interface AMRewardedAd : AMAdView
/// Whether the interstitial ad has been fetched and is ready to
/// display.
@property (nonatomic, readonly) BOOL isReady;
@property (nonatomic) NSTimeInterval closeDelay;
/// Initialize the ad view, with required placement ID. Note that
/// you’ll need to get a placement ID from your Admixer representative
/// or your ad network.
/// \param placementId the placement ID given from AN
///
///
/// returns:
/// s void
- (nonnull instancetype)initWithPlacementId:(NSString * _Nonnull)placementId;
/// Once you’ve loaded the ad into your view with loadAd, you’ll show
/// it to the user.  For example:
/// @code
/// <ul>
///   <li>
///     (void)adDidReceiveAd:(id)ad
///     {
///     if (self.inter.isReady) {
///     [self.inter displayAdFromViewController:self];
///     }
///     }
///     @endcode
///     Technically, you don’t need to implement adDidReceiveAd: in order to
///     display the ad; it’s used here for convenience. Note that you should
///     check isReady first to make sure there’s an ad to show.
///   </li>
/// </ul>
- (void)displayFrom:(UIViewController * _Nonnull)controller;
@property (nonatomic) CGRect frame;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end

@class AMRewardedItem;

SWIFT_PROTOCOL("_TtP10AdmixerSDK20AMRewardedAdDelegate_")
@protocol AMRewardedAdDelegate <AMAdDelegate>
@optional
/// This method tells your ad view what to do if the ad can’t be shown.
/// A simple implementation used during development could just log,
/// like so:
/// @code
/// <ul>
///   <li>
///     (void)adFailedToDisplay:(AMRewardedAd *)ad
///     {
///     NSLog(@“Oh no, the ad failed to display!”);
///     }
///     @endcode
///   </li>
/// </ul>
- (void)adFailedToDisplay:(AMRewardedAd * _Nonnull)ad;
- (void)adRewarded:(AMRewardedAd * _Nonnull)ad userDidEarn:(AMRewardedItem * _Nonnull)reward;
@end

@class NSDecimalNumber;

SWIFT_CLASS("_TtC10AdmixerSDK14AMRewardedItem")
@interface AMRewardedItem : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
@property (nonatomic, readonly, strong) NSDecimalNumber * _Null_unspecified amount;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10AdmixerSDK21AMTargetingParameters")
@interface AMTargetingParameters : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10AdmixerSDK21AMVideoPlayerSettings")
@interface AMVideoPlayerSettings : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
